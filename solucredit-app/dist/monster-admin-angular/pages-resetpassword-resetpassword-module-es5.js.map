{"version":3,"sources":["webpack:///src/app/pages/resetpassword/resetpassword.component.ts","webpack:///src/app/pages/resetpassword/resetpassword.component.html","webpack:///src/app/pages/resetpassword/resetpassword.module.ts","webpack:///src/app/pages/resetpassword/resetpassword.service.ts"],"names":["ResetpasswordComponent","fb","_service","notifier","resetForm","group","Email","required","email","isEmailUnique","isEmailInputFocus","console","log","sub","resetEmail","controls","value","pipe","response","notify","err","subscribe","unsubscribe","valid","emailFocus","changePassword","selector","templateUrl","styleUrls","routes","path","data","title","urls","url","component","ResetpasswordModule","forChild","declarations","imports","httpOptions","headers","responseType","observe","ResetpasswordService","http","uri","urlAuthorize","post","providedIn"],"mappings":"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","file":"pages-resetpassword-resetpassword-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ResetpasswordService } from './resetpassword.service'\r\nimport { NotifierService } from 'angular-notifier';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\n@Component({\r\n  selector: 'app-resetpassword',\r\n  templateUrl: './resetpassword.component.html',\r\n  styleUrls: ['./resetpassword.component.css']\r\n})\r\nexport class ResetpasswordComponent implements OnInit {\r\n\r\n  //FLAGS DE COMPOTAMIENTO\r\n  isEmailUnique: boolean;\r\n  isEmailInputFocus: boolean;\r\n  resetForm = this.fb.group({\r\n    \r\n    Email: ['', [Validators.required, Validators.email]]\r\n   \r\n  });\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private _service: ResetpasswordService,\r\n    private notifier: NotifierService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.isEmailUnique = true;\r\n    this.isEmailInputFocus = false;\r\n  }\r\n  emailFocus() {\r\n    console.log('EmailFOcus');\r\n    this.isEmailInputFocus = true;\r\n    this.isEmailUnique = true;\r\n\r\n  }\r\n\r\n  changePassword() {\r\n    console.log('changePassword');\r\n    let sub = this._service.resetEmail(this.resetForm.controls.Email.value).pipe(\r\n      map((response) => {\r\n        this.notifier.notify('success', 'Se envio un correo de recuperación al correo indicado.');\r\n\r\n\r\n      }),\r\n      catchError((err) => {\r\n        this.notifier.notify('error', 'Ocurrio un problema con la conexion' + err);\r\n        console.log(err);\r\n        return of();\r\n      })\r\n\r\n    ).subscribe(() => {\r\n      //console.log('................');\r\n      sub.unsubscribe()\r\n    });\r\n\r\n  }\r\n\r\n  isCorrect(): boolean { return !this.resetForm.valid; }\r\n\r\n}\r\n","<notifier-container></notifier-container>\r\n<div class=\"auth-wrapper d-flex no-block justify-content-center align-items-center\" style=\"background:url(assets/images/background/login-register.jpg) no-repeat center center;\">\r\n    <div class=\"auth-box\">\r\n        <div>\r\n            <div class=\"logo\">\r\n                <span class=\"db\"><img alt=\"thumbnail\" class=\"rounded-circle\" width=\"100\" src=\"https://solucredit-public.s3.amazonaws.com/resources/logo.png\"></span>\r\n\r\n            </div>\r\n            <!-- Form -->\r\n            <div class=\"row\">\r\n                <div class=\"col-12\">\r\n                    <form class=\"form-horizontal m-t-20\" [formGroup]=\"resetForm\">\r\n                        <div class=\"form-group row\">\r\n                            <div class=\"col-12\">\r\n                                <input class=\"form-control form-control-lg\" (focus)=\"emailFocus()\" formControlName=\"Email\" type=\"email\" placeholder=\"Correo electronico registrado\">\r\n                                <small class=\"form-text text-danger\" *ngIf=\"!resetForm.controls.Email.valid && (resetForm.controls.Email.dirty || resetForm.controls.Email.touched)\">Ingresa un correo valido</small>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- (click)=\"sendReset()\" -->\r\n\r\n                        <div class=\"form-group text-center\">\r\n                            <small class=\"form-text text-danger\" *ngIf=\"!isEmailUnique && isEmailInputFocus\">El correo ya esta registrado</small>\r\n                            <div class=\"col-xs-12 p-b-20\">\r\n                                <button class=\"btn btn-block btn-lg btn-info\" (click)=\"changePassword()\" [disabled]=\"isCorrect()\">Enviar correo de recuperación</button>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ResetpasswordComponent } from './resetpassword.component';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NotifierModule } from 'angular-notifier';\r\nconst routes: Routes = [\r\n\r\n  {\r\n    path: '',\r\n    data: {\r\n      title: 'Rcupera tu contraseña',\r\n      urls: [\r\n        { title: '', url: '/reset-password' },\r\n        { title: '' }\r\n      ]\r\n    },\r\n    component: ResetpasswordComponent\r\n  }\r\n];\r\n@NgModule({\r\n  declarations: [ResetpasswordComponent],\r\n  imports: [\r\n    CommonModule, FormsModule, ReactiveFormsModule, NgbModule, NotifierModule, RouterModule.forChild(routes)\r\n  ]\r\n})\r\nexport class ResetpasswordModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders, HttpResponse } from '@angular/common/http';\r\nimport { Observable, throwError, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders(\r\n    {\r\n      'Content-Type': 'application/json',\r\n      /* 'Access-Control-Allow-Credentials': 'true' */\r\n    }),\r\n  responseType: 'json' as const,\r\n  //withCredentials: true as const,  \r\n  observe: 'response' as const\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ResetpasswordService {\r\n\r\n  \r\n  constructor(private http: HttpClient) { }\r\n\r\n  public resetEmail(email: string): Observable<HttpResponse<any>> {\r\n    const uri = `${environment.urlAuthorize}/resetpassword`;\r\n    return this.http.post(uri, {email}, httpOptions).pipe(\r\n      map((response) => {\r\n        //console.log(response);\r\n        return response;\r\n      })\r\n    )\r\n  };\r\n}\r\n"]}