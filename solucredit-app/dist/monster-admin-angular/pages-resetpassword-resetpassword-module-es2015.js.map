{"version":3,"sources":["./src/app/pages/resetpassword/resetpassword.component.ts","./src/app/pages/resetpassword/resetpassword.component.html","./src/app/pages/resetpassword/resetpassword.module.ts","./src/app/pages/resetpassword/resetpassword.service.ts"],"names":[],"mappings":"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","file":"pages-resetpassword-resetpassword-module-es2015.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ResetpasswordService } from './resetpassword.service'\r\nimport { NotifierService } from 'angular-notifier';\r\nimport { map, catchError } from 'rxjs/operators';\r\nimport { of } from 'rxjs';\r\n@Component({\r\n  selector: 'app-resetpassword',\r\n  templateUrl: './resetpassword.component.html',\r\n  styleUrls: ['./resetpassword.component.css']\r\n})\r\nexport class ResetpasswordComponent implements OnInit {\r\n\r\n  //FLAGS DE COMPOTAMIENTO\r\n  isEmailUnique: boolean;\r\n  isEmailInputFocus: boolean;\r\n  resetForm = this.fb.group({\r\n    \r\n    Email: ['', [Validators.required, Validators.email]]\r\n   \r\n  });\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private _service: ResetpasswordService,\r\n    private notifier: NotifierService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.isEmailUnique = true;\r\n    this.isEmailInputFocus = false;\r\n  }\r\n  emailFocus() {\r\n    console.log('EmailFOcus');\r\n    this.isEmailInputFocus = true;\r\n    this.isEmailUnique = true;\r\n\r\n  }\r\n\r\n  changePassword() {\r\n    console.log('changePassword');\r\n    let sub = this._service.resetEmail(this.resetForm.controls.Email.value).pipe(\r\n      map((response) => {\r\n        this.notifier.notify('success', 'Se envio un correo de recuperación al correo indicado.');\r\n\r\n\r\n      }),\r\n      catchError((err) => {\r\n        this.notifier.notify('error', 'Ocurrio un problema con la conexion' + err);\r\n        console.log(err);\r\n        return of();\r\n      })\r\n\r\n    ).subscribe(() => {\r\n      //console.log('................');\r\n      sub.unsubscribe()\r\n    });\r\n\r\n  }\r\n\r\n  isCorrect(): boolean { return !this.resetForm.valid; }\r\n\r\n}\r\n","<notifier-container></notifier-container>\r\n<div class=\"auth-wrapper d-flex no-block justify-content-center align-items-center\" style=\"background:url(assets/images/background/login-register.jpg) no-repeat center center;\">\r\n    <div class=\"auth-box\">\r\n        <div>\r\n            <div class=\"logo\">\r\n                <span class=\"db\"><img alt=\"thumbnail\" class=\"rounded-circle\" width=\"100\" src=\"https://solucredit-public.s3.amazonaws.com/resources/logo.png\"></span>\r\n\r\n            </div>\r\n            <!-- Form -->\r\n            <div class=\"row\">\r\n                <div class=\"col-12\">\r\n                    <form class=\"form-horizontal m-t-20\" [formGroup]=\"resetForm\">\r\n                        <div class=\"form-group row\">\r\n                            <div class=\"col-12\">\r\n                                <input class=\"form-control form-control-lg\" (focus)=\"emailFocus()\" formControlName=\"Email\" type=\"email\" placeholder=\"Correo electronico registrado\">\r\n                                <small class=\"form-text text-danger\" *ngIf=\"!resetForm.controls.Email.valid && (resetForm.controls.Email.dirty || resetForm.controls.Email.touched)\">Ingresa un correo valido</small>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- (click)=\"sendReset()\" -->\r\n\r\n                        <div class=\"form-group text-center\">\r\n                            <small class=\"form-text text-danger\" *ngIf=\"!isEmailUnique && isEmailInputFocus\">El correo ya esta registrado</small>\r\n                            <div class=\"col-xs-12 p-b-20\">\r\n                                <button class=\"btn btn-block btn-lg btn-info\" (click)=\"changePassword()\" [disabled]=\"isCorrect()\">Enviar correo de recuperación</button>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ResetpasswordComponent } from './resetpassword.component';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NotifierModule } from 'angular-notifier';\r\nconst routes: Routes = [\r\n\r\n  {\r\n    path: '',\r\n    data: {\r\n      title: 'Rcupera tu contraseña',\r\n      urls: [\r\n        { title: '', url: '/reset-password' },\r\n        { title: '' }\r\n      ]\r\n    },\r\n    component: ResetpasswordComponent\r\n  }\r\n];\r\n@NgModule({\r\n  declarations: [ResetpasswordComponent],\r\n  imports: [\r\n    CommonModule, FormsModule, ReactiveFormsModule, NgbModule, NotifierModule, RouterModule.forChild(routes)\r\n  ]\r\n})\r\nexport class ResetpasswordModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpErrorResponse, HttpHeaders, HttpResponse } from '@angular/common/http';\r\nimport { Observable, throwError, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders(\r\n    {\r\n      'Content-Type': 'application/json',\r\n      /* 'Access-Control-Allow-Credentials': 'true' */\r\n    }),\r\n  responseType: 'json' as const,\r\n  //withCredentials: true as const,  \r\n  observe: 'response' as const\r\n};\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ResetpasswordService {\r\n\r\n  \r\n  constructor(private http: HttpClient) { }\r\n\r\n  public resetEmail(email: string): Observable<HttpResponse<any>> {\r\n    const uri = `${environment.urlAuthorize}/resetpassword`;\r\n    return this.http.post(uri, {email}, httpOptions).pipe(\r\n      map((response) => {\r\n        //console.log(response);\r\n        return response;\r\n      })\r\n    )\r\n  };\r\n}\r\n"],"sourceRoot":"webpack:///"}